package com.nppgks.reportingsystem.unit.reportgeneration.manual_reports.poverki;

import com.nppgks.reportingsystem.opcservice.OpcServiceRequests;
import com.nppgks.reportingsystem.reportgeneration.manual_reports.SaveReportStrategy;
import com.nppgks.reportingsystem.reportgeneration.manual_reports.poverki.mi3272.calculations.MI3272Calculator;
import com.nppgks.reportingsystem.reportgeneration.manual_reports.poverki.mi3272.calculations.MI3272InitData;
import com.nppgks.reportingsystem.reportgeneration.manual_reports.poverki.mi3272.calculations.withtpr.MI3272TprInitData;
import com.nppgks.reportingsystem.reportgeneration.manual_reports.poverki.mi3272.calculations.withtpr.TprCoeffInitData;
import com.nppgks.reportingsystem.reportgeneration.manual_reports.poverki.mi3272.calculations.withtpr.MI3272WithTprCalculator;
import com.nppgks.reportingsystem.service.dbservices.manual_reports.ManualReportTypeService;
import com.nppgks.reportingsystem.service.dbservices.manual_reports.ManualTagService;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

public class MI3272WithTprReportGeneratorTest1234 {

    // Создаем моки для зависимостей
    private OpcServiceRequests opcServiceRequests = Mockito.mock(OpcServiceRequests.class);
    private ManualTagService manualTagService = Mockito.mock(ManualTagService.class);
    private ManualReportTypeService manualReportTypeService = Mockito.mock(ManualReportTypeService.class);
    private SaveReportStrategy saveReportStrategy = Mockito.mock(SaveReportStrategy.class);
    private MI3272TprInitData initData = Mockito.mock(MI3272TprInitData.class);
    private TprCoeffInitData initDataDop = Mockito.mock(TprCoeffInitData.class);

    @Test
    void testMI3272WithTprReportGenerator() {
        // Таблица 1
        Mockito.when(initData.getDelta_KP()).thenReturn(0.05);
        Mockito.when(initData.getDelta_t_KP()).thenReturn(0.2);
        Mockito.when(initData.getDelta_PP()).thenReturn(0.03);
        Mockito.when(initData.getDelta_t_PP()).thenReturn(0.2);
        Mockito.when(initData.getDelta_UOI_K()).thenReturn(0.001);
        Mockito.when(initData.getKF_conf()).thenReturn(65454.5);
        Mockito.when(initData.getZS()).thenReturn(0.0682);


        // Таблица 2
        Mockito.when(initDataDop.getN_TPR_ij_avg()).thenReturn(new double[][]{
                {46.123608, 46.116013, 46.124084, 46.116341, 46.118843},
                {46.117413, 46.114552, 46.116962, 46.115993, 46.11533},
                {46.120476, 46.127182, 46.12397, 46.126762, 46.12624},
                {46.130447, 46.140736, 46.140926, 46.132839, 46.138634},
                {46.149391, 46.150482, 46.151424, 46.143139, 46.153027}
        });
        Mockito.when(initData.getN_TPR_ij_avg()).thenReturn(new double[][]{
                {46.123608, 46.116013, 46.124084, 46.116341, 46.118843},
                {46.117413, 46.114552, 46.116962, 46.115993, 46.11533},
                {46.120476, 46.127182, 46.12397, 46.126762, 46.12624},
                {46.130447, 46.140736, 46.140926, 46.132839, 46.138634},
                {46.149391, 46.150482, 46.151424, 46.143139, 46.153027}
        });
        Mockito.when(initData.getT_TPR_ij()).thenReturn(new double[][]{
                {13.20848, 13.20463, 13.203671, 13.198812, 13.197015},
                {13.18631, 13.35469, 13.531353, 13.632994, 13.65826},
                {13.093396, 13.098581, 13.10614, 13.106156, 13.109241},
                {13.244493, 13.35044, 13.502419, 13.537302, 13.563994},
                {13.749858, 13.800687, 13.818151, 13.830619, 13.837958}
        });
        Mockito.when(initDataDop.getT_TPR_ij_avg()).thenReturn(new double[][]{
                {13.20848, 13.20463, 13.203671, 13.198812, 13.197015},
                {13.18631, 13.35469, 13.531353, 13.632994, 13.65826},
                {13.093396, 13.098581, 13.10614, 13.106156, 13.109241},
                {13.244493, 13.35044, 13.502419, 13.537302, 13.563994},
                {13.749858, 13.800687, 13.818151, 13.830619, 13.837958}
        });
        Mockito.when(initData.getT_TPR_ij_avg()).thenReturn(new double[][]{
                {13.20848, 13.20463, 13.203671, 13.198812, 13.197015},
                {13.18631, 13.35469, 13.531353, 13.632994, 13.65826},
                {13.093396, 13.098581, 13.10614, 13.106156, 13.109241},
                {13.244493, 13.35044, 13.502419, 13.537302, 13.563994},
                {13.749858, 13.800687, 13.818151, 13.830619, 13.837958}
        });
        Mockito.when(initData.getP_TPR_ij()).thenReturn(new double[][]{
                {1.437914,1.437763,1.438334,1.438301,1.438719},
                {1.268818,1.268860,1.269291,1.268851,1.269054},
                {1.637646,1.637226,1.637582,1.637785,1.638554},
                {2.459271,2.459309,2.459214,2.458488,2.488933},
                {2.328182,2.328280,2.328530,2.328470,2.329509}
        });
        Mockito.when(initDataDop.getP_TPR_ij_avg()).thenReturn(new double[][]{
                {1.437914,1.437763,1.438334,1.438301,1.438719},
                {1.268818,1.268860,1.269291,1.268851,1.269054},
                {1.637646,1.637226,1.637582,1.637785,1.638554},
                {2.459271,2.459309,2.459214,2.458488,2.488933},
                {2.328182,2.328280,2.328530,2.328470,2.329509}
        });
        Mockito.when(initData.getP_TPR_ij_avg()).thenReturn(new double[][]{
                {1.437914,1.437763,1.438334,1.438301,1.438719},
                {1.268818,1.268860,1.269291,1.268851,1.269054},
                {1.637646,1.637226,1.637582,1.637785,1.638554},
                {2.459271,2.459309,2.459214,2.458488,2.488933},
                {2.328182,2.328280,2.328530,2.328470,2.329509}
        });
        Mockito.when(initDataDop.getT_KP_ij_avg()).thenReturn(new double[][]{
                {13.208480, 13.204630, 13.203671, 13.198812, 13.197015},
                {13.186310, 13.354690, 13.531353, 13.632994, 13.658260},
                {13.093396, 13.098581, 13.106140, 13.106156, 13.109241},
                {13.244493, 13.350440, 13.502419, 13.537302, 13.563994},
                {13.749858, 13.800687, 13.818151, 13.830619, 13.837958}
        });
        Mockito.when(initData.getT_KP_ij_avg()).thenReturn(new double[][]{
                {13.208480, 13.204630, 13.203671, 13.198812, 13.197015},
                {13.186310, 13.354690, 13.531353, 13.632994, 13.658260},
                {13.093396, 13.098581, 13.106140, 13.106156, 13.109241},
                {13.244493, 13.350440, 13.502419, 13.537302, 13.563994},
                {13.749858, 13.800687, 13.818151, 13.830619, 13.837958}
        });

        Mockito.when(initData.getT_PP_ij()).thenReturn(new double[][]{
                {13.208480, 13.204630, 13.203671, 13.198812, 13.197015},
                {13.186310, 13.354690, 13.531353, 13.632994, 13.658260},
                {13.093396, 13.098581, 13.106140, 13.106156, 13.109241},
                {13.244493, 13.350440, 13.502419, 13.537302, 13.563994},
                {13.749858, 13.800687, 13.818151, 13.830619, 13.837958}
        });
        Mockito.when(initDataDop.getP_KP_ij_avg()).thenReturn(new double[][]{
                {1.437914, 1.437763, 1.438334, 1.438301, 1.438719},
                {1.268818, 1.26886, 1.269291, 1.268851, 1.269054},
                {1.637646, 1.637226, 1.637582, 1.637785, 1.638554},
                {2.459271, 2.459309, 2.459214, 2.458488, 2.488933},
                {2.328182, 2.32828, 2.32853, 2.32847, 2.329509}
        });

        Mockito.when(initData.getP_KP_ij_avg()).thenReturn(new double[][]{
                {1.437914, 1.437763, 1.438334, 1.438301, 1.438719},
                {1.268818, 1.26886, 1.269291, 1.268851, 1.269054},
                {1.637646, 1.637226, 1.637582, 1.637785, 1.638554},
                {2.459271, 2.459309, 2.459214, 2.458488, 2.488933},
                {2.328182, 2.32828, 2.32853, 2.32847, 2.329509}
        });
        Mockito.when(initDataDop.getT_st_ij()).thenReturn(new double[][]{
                {14.79673, 14.79673, 14.79673, 14.79673, 14.79673},
                {15.239799, 15.239799, 15.239799, 15.239799, 15.239799},
                {14.34462, 14.34462, 14.34462, 14.34462, 14.34462},
                {14.181854, 14.181854, 14.181854, 14.181854, 14.181854},
                {13.99197, 13.99197, 13.99197, 13.99197, 13.99197}
        });
        Mockito.when(initData.getT_st_ij()).thenReturn(new double[][]{
                {14.79673, 14.79673, 14.79673, 14.79673, 14.79673},
                {15.239799, 15.239799, 15.239799, 15.239799, 15.239799},
                {14.34462, 14.34462, 14.34462, 14.34462, 14.34462},
                {14.181854, 14.181854, 14.181854, 14.181854, 14.181854},
                {13.99197, 13.99197, 13.99197, 13.99197, 13.99197}
        });
        Mockito.when(initDataDop.getRho_TPR_ij()).thenReturn (new double[][]   {
                {821.176941, 821.209229, 821.206665, 821.23053, 821.166626},
                {820.770813, 820.731018, 820.730652, 820.759277, 820.740967},
                {821.386963, 821.378601, 821.384521, 821.381714, 821.370239},
                {821.613708, 821.623169, 821.631958, 821.616089, 821.622253},
                {821.235413, 821.241638, 821.228149, 821.220398, 821.230652}
        });

        Mockito.when(initData.getRho_TPR_ij()).thenReturn (new double[][]   {
                {821.176941, 821.209229, 821.206665, 821.23053, 821.166626},
                {820.770813, 820.731018, 820.730652, 820.759277, 820.740967},
                {821.386963, 821.378601, 821.384521, 821.381714, 821.370239},
                {821.613708, 821.623169, 821.631958, 821.616089, 821.622253},
                {821.235413, 821.241638, 821.228149, 821.220398, 821.230652}
        });

        Mockito.when(initData.getRho_BIK_ij_avg()).thenReturn(new double[][]{
                {821.00253000, 821.36783400, 821.00476600, 821.56112200, 821.56987400},
                {821.27972200, 821.31288200, 821.49213100, 821.22719800, 821.43949800},
                {821.00046600, 821.20914000, 821.24746400, 821.14594500, 821.15158000},
                {821.57747800, 821.28619500, 821.47633700, 821.51592000, 821.00788500},
                {821.35436000, 821.34610300, 821.18817300, 821.68827600, 821.14209700}
        });


        Mockito.when(initData.getT_ij_avg()).thenReturn(new double[][]{
                {1.52848400, 1.06089100, 0.82105600, 0.67157300, 0.55028400},
                {1.52071900, 1.06007200, 0.82103600, 0.67354900, 0.55000200},
                {1.55128000, 1.06025900, 0.82129500, 0.67252400, 0.55638100},
                {1.52228300, 1.06058600, 0.82044200, 0.67396800, 0.55243700},
                {1.55218900, 1.06065100, 0.82185600, 0.67494400, 0.55249800}
        });

        Mockito.when(initData.getT_ij()).thenReturn(new double[][]{
                {1.528484, 1.520719, 1.55128, 1.522283, 1.552189},
                {1.060891, 1.060072, 1.060259, 1.060586, 1.060651},
                {0.821056, 0.821036, 0.821295, 0.820442, 0.821856},
                {0.671573, 0.673549, 0.672524, 0.673968, 0.674944},
                {0.550284, 0.550002, 0.556381, 0.552437, 0.552498}
        });

        Mockito.when(initData.getT_PP_ij()).thenReturn(new double[][]{
                {13.20848, 13.20463, 13.203671, 13.198812, 13.197015},
                {13.18631, 13.35469, 13.531353, 13.632994, 13.65826},
                {13.093396, 13.098581, 13.10614, 13.106156, 13.109241},
                {13.244493, 13.35044, 13.502419, 13.537302, 13.563994},
                {13.749858, 13.800687, 13.818151, 13.830619, 13.837958}
        });

        Mockito.when(initData.getP_PP_ij()).thenReturn(new double[][]{
                {1.437914, 1.437763, 1.438334, 1.438301, 1.438719},
                {1.268818, 1.268860, 1.269291, 1.268851, 1.269054},
                {1.637646, 1.637226, 1.637582, 1.637785, 1.638554},
                {2.459271, 2.459309, 2.459214, 2.458488, 2.488933},
                {2.328182, 2.328280, 2.328530, 2.328470, 2.329509}
        });

        Mockito.when(initData.getT_PP_ij_avg()).thenReturn(new double[][]{
                {13.208480, 13.204630, 13.203671, 13.198812, 13.197015},
                {13.186310, 13.354690, 13.531353, 13.632994, 13.658260},
                {13.093396, 13.098581, 13.106140, 13.106156, 13.109241},
                {13.244493, 13.350440, 13.502419, 13.537302, 13.563994},
                {13.749858, 13.800687, 13.818151, 13.830619, 13.837958}
        });

        Mockito.when(initData.getP_PP_ij_avg()).thenReturn(new double[][]{
                {1.437914, 1.437763, 1.438334, 1.438301, 1.438719},
                {1.268818, 1.268860, 1.269291, 1.268851, 1.269054},
                {1.637646, 1.637226, 1.637582, 1.637785, 1.638554},
                {2.459271, 2.459309, 2.459214, 2.458488, 2.488933},
                {2.328182, 2.328280, 2.328530, 2.328470, 2.329509}
        });




//        String K_TPR_j = """
//                [386.110186941636,386.0809000861666,386.14915625522855,386.2235176153131,386.3310748399359]
//                """;
//        double[] array = new double[5];
//        String[] parts = K_TPR_j.replace("[", "").replace("]", "").split(",");
//        for (int i = 0; i < parts.length; i++) {
//            array[i] = Double.parseDouble(parts[i]);
//        }



        Mockito.when(initData.getK_TPR_j()).thenReturn(new double[]
                {386.110186941636,386.0809000861666,386.14915625522855,386.2235176153131,386.3310748399359}

//                        {386.110186941636,386.0809000861666,386.14915625522855,386.2235176153131,386.3310748399359 },
//                        {386.110186941636,386.0809000861666,386.14915625522855,386.2235176153131,386.3310748399359 },
//                        {386.110186941636,386.0809000861666,386.14915625522855,386.2235176153131,386.3310748399359 },
//                        {386.110186941636,386.0809000861666,386.14915625522855,386.2235176153131,386.3310748399359 }
        );

        Mockito.when(initData.getW_w_TPR_ij()).thenReturn(new double[][]{
                {4.209, 4.205, 4.204, 4.198812, 4.197015},
                {4.186310, 4.354690, 4.53453, 4.632994, 4.658260},
                {4.093396, 4.098581, 4.1090, 4.106156, 4.109241},
                {4.244493, 4.350440, 4.50267, 4.537302, 4.563994},
                {4.749858, 4.800687, 4.818151, 4.830619, 4.837958}
        });

        Mockito.when(initData.getW_xc_TPR_ij()).thenReturn(new double[][]{
                {4.209, 4.205, 4.204, 4.198812, 4.197015},
                {4.186310, 4.354690, 4.53453, 4.632994, 4.658260},
                {4.093396, 4.098581, 4.1090, 4.106156, 4.109241},
                {4.244493, 4.350440, 4.50267, 4.537302, 4.563994},
                {4.749858, 4.800687, 4.818151, 4.830619, 4.837958}
        });



        Mockito.when(initData.getRho_PP_ij()).thenReturn(new double[][]{
                {821.462502, 821.058441, 821.029772, 821.310984, 821.422610},
                {821.130968, 821.669434, 821.146310, 821.265997, 821.221683},
                {821.548923, 821.137542, 821.493426, 821.618185, 821.226302},
                {821.276375, 821.326165, 821.466675, 821.429466, 821.568921},
                {821.108450, 821.330800, 821.421405, 821.169638, 821.071290}
        });

        Mockito.when(initData.getN_TPR_ij_zad()).thenReturn(new double[][]{
                {10000, 10000, 10000, 10000, 10000},
                {10000, 10000, 10000, 10000, 10000},
                {10000, 10000, 10000, 10000, 10000},
                {10000, 10000, 10000, 10000, 10000},
                {10000, 10000, 10000, 10000, 10000}
        });

        Mockito.when(initData.getN_mas_ij()).thenReturn(new double[][]{
                {1179666, 1180144, 1181765, 1179950, 1179109},
                {1180095, 1179330, 1177888, 1180360, 1180693},
                {1182529, 1181498, 1179606, 1180415, 1180545},
                {1180653, 1181751, 1182398, 1179515, 1181165},
                {1177599, 1178164, 1179274, 1179927, 1178474}
        });


        // Таблица 3
        Mockito.when(initDataDop.getAlpha_cyl_t()).thenReturn(0.0000108);
        Mockito.when(initDataDop.getAlpha_cyl_t_sq()).thenReturn(0.0000216);
        Mockito.when(initDataDop.getAlpha_st_t()).thenReturn(0.00000144);
        Mockito.when(initDataDop.getD()).thenReturn(311.15);
        Mockito.when(initDataDop.getS()).thenReturn(22.225);
        Mockito.when(initDataDop.getE()).thenReturn(196500.0);
        Mockito.when(initDataDop.getV_KP_0()).thenReturn(0.039781);
        Mockito.when(initData.getCalibrCharImpl()).thenReturn("СОИ рабочий диапазон");
        Mockito.when(initDataDop.getWorkingFluid()).thenReturn("нефть");



        MI3272WithTprCalculator mi3272WithTprCalculator = new MI3272WithTprCalculator();
        mi3272WithTprCalculator.initRestData(initData);
        mi3272WithTprCalculator.initTprCoeffData(initDataDop);
        mi3272WithTprCalculator.calculateWithTpr();

    }
}

        // Группа, к которой принадле